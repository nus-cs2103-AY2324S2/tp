@startuml
class UiManager {
+ start(): void
}

class MainWindow {
+ fillInnerparts(): void
- executeCommand(commandText: String): CommandResult
}

class LogicManager {
+ execute(commandText: String): CommandResult
}

class AddressBookParser {
+ parseCommand(userInput: String): Command
}

class FindTagCommandParser {
+ parse(args: String): FindTagCommand
}

class FindTagCommand {
+ execute(model: Model): CommandResult
}

class TagContainsKeywordsPredicate {
- keywords: List<String>
}

class CommandResult {
}

class CommandBox {
+ CommandBox(commandExecutor: CommandExecutor)
}

interface Model

class ModelManager {
+ updateFilteredClientList(predicate: predicate<Client>): void
+ getFilteredClientList(): ObservableList<Client>
}

UiManager -> MainWindow : creates >
MainWindow -> LogicManager
MainWindow --> CommandBox : creates >
LogicManager --> AddressBookParser : creates >
Model <|-- ModelManager
LogicManager --> Model
AddressBookParser --> FindTagCommandParser : creates >
FindTagCommand - FindTagCommandParser : creates <
CommandResult <- FindTagCommand : creates <
FindTagCommand --> TagContainsKeywordsPredicate
FindTagCommand -- ModelManager : returns filtered list <
TagContainsKeywordsPredicate <- ModelManager
LogicManager -- FindTagCommand : executes >
CommandBox -- CommandResult : is used to create <
@enduml
